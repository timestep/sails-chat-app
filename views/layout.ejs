<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <link href="https://netdna.bootstrapcdn.com/bootswatch/3.0.0/flatly/bootstrap.min.css" rel="stylesheet">
    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, tylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    
    <!--STYLES END-->
  </head>

<body>
  <div class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/">chatApp</a>
      </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <% if(session.authenticated) { %>
              <li class = "active">
                <a href="/user/show/<%=session.User.id%>">
                  <%=session.User.name%>
                </a>
              </li>
              <li class="active">
                <a href="/chat/new/">New Chat Room</a>
              </li>
              <li class="active">
                <a href="/chat/join/">Join Chat Room</a>
              </li>
            <% } %>
            <% if(session.authenticated && session.User.admin) {%>
              <li><a href="/user">User Administration</a></li>
                <li><a href="#">Placeholder2</a></li>
            <% } %>
            </ul>
            <div class="navbar-right">
              <% if(session.authenticated) {%>
                <a class="btn btn-default navbar-btn navbar-right" href="/session/destroy">sign-out</a>
              <% } %>
            </div>
            <% if (!session.authenticated) {%>
            <form class="navbar-form navbar-right" action="/session/create">
              <div class="form-group">
                <input class="form-control" type="text" placeholder="username" name="username">
              </div>
              <div class="form-group">
                <input class="form-control" type="password" placeholder="Password" name="password">
              </div>
              <button class="btn btn-success" type="submit">Sign In</button>
            </form>
            <% } %>
       </div>
    </div>
  </div>

  <div class="container" style="margin-top:55px">
    <div class="alert">
    <% if(flash && flash.err) { %>
        <ul class="alert alert-success">
            <% Object.keys(flash.err).forEach(function(error){ %>
                <li><%= JSON.stringify(flash.err[error]) %></li>
            <% }) %>
        </ul>
    <% } %>
    </div>
<%- body %>
  </div>    
  
   <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
